{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"awsipranges \u00b6 Work with the AWS IP address ranges in native Python. Amazon Web Services (AWS) publishes its current IP address ranges in JSON format. Python v3 provides an ipaddress module in the standard library that allows you to create, manipulate, and perform operations on IPv4 and IPv6 addresses and networks. Wouldn't it be nice if you could work with the AWS IP address ranges like native Python objects? Features \u00b6 Work with the AWS IP prefixes as a simple AWSIPPrefixes collection. Quickly check if an IP address, interface, or network is contained in the AWS IP address ranges. Get the AWS IP prefix that contains an IP address, interface, or network. See what services are served from an IP prefix. Filter the AWS IP prefixes by region , network border group , service , and IP prefix version . Use the AWS prefix data in your app or automation scripts in the format required by your infrastructure. Easily validate the TLS certificate presented by the IP ranges server. awsipranges has no third-party dependencies and is compatible with CPython v3.7+. >>> import awsipranges >>> aws_ip_ranges = awsipranges . get_ranges ( cafile = \"amazon_root_certificates.pem\" ) >>> '52.94.5.15' in aws_ip_ranges True >>> aws_ip_ranges [ '52.94.5.15' ] AWSIPv4Prefix ( '52.94.5.0/24' , region = 'eu-west-1' , network_border_group = 'eu-west-1' , services = ( 'AMAZON' , 'DYNAMODB' )) >>> aws_ip_ranges . filter ( services = 'CODEBUILD' ) { 'create_date' : datetime . datetime ( 2021 , 8 , 24 , 1 , 31 , 14 , tzinfo = datetime . timezone . utc ), 'ipv4_prefixes' : ( AWSIPv4Prefix ( '3.26.127.24/29' , region = 'ap-southeast-2' , network_border_group = 'ap-southeast-2' , services = ( 'CODEBUILD' ,)), AWSIPv4Prefix ( '3.38.90.8/29' , region = 'ap-northeast-2' , network_border_group = 'ap-northeast-2' , services = ( 'CODEBUILD' ,)), AWSIPv4Prefix ( '3.68.251.232/29' , region = 'eu-central-1' , network_border_group = 'eu-central-1' , services = ( 'CODEBUILD' ,)), AWSIPv4Prefix ( '3.98.171.224/29' , region = 'ca-central-1' , network_border_group = 'ca-central-1' , services = ( 'CODEBUILD' ,)), AWSIPv4Prefix ( '3.101.177.48/29' , region = 'us-west-1' , network_border_group = 'us-west-1' , services = ( 'CODEBUILD' ,)), ... ), 'ipv6_prefixes' : (), 'sync_token' : '1629768674' } >>> for prefix in aws_ip_ranges . filter ( regions = 'eu-west-1' , services = 'DYNAMODB' ): ... print ( prefix . network_address , prefix . netmask ) ... 52.94.5.0 255.255.255.0 52.94.24.0 255.255.254.0 52.94.26.0 255.255.254.0 52.119.240.0 255.255.248.0 Installation \u00b6 Installing and upgrading awsipranges is easy: Install via PIP \u276f pip install awsipranges Upgrade to the latest version \u276f pip install --upgrade awsipranges Documentation \u00b6 Excellent documentation is now available at: https://aws-samples.github.io/awsipranges/ Check out the Quickstart to dive in and begin using awsipranges. Contribute \u00b6 See CONTRIBUTING for information on how to contribute to this project. Security \u00b6 See CONTRIBUTING for information on how to report a security issue with this project. License \u00b6 This project is licensed under the Apache-2.0 License .","title":"Home"},{"location":"index.html#awsipranges","text":"Work with the AWS IP address ranges in native Python. Amazon Web Services (AWS) publishes its current IP address ranges in JSON format. Python v3 provides an ipaddress module in the standard library that allows you to create, manipulate, and perform operations on IPv4 and IPv6 addresses and networks. Wouldn't it be nice if you could work with the AWS IP address ranges like native Python objects?","title":"awsipranges"},{"location":"index.html#features","text":"Work with the AWS IP prefixes as a simple AWSIPPrefixes collection. Quickly check if an IP address, interface, or network is contained in the AWS IP address ranges. Get the AWS IP prefix that contains an IP address, interface, or network. See what services are served from an IP prefix. Filter the AWS IP prefixes by region , network border group , service , and IP prefix version . Use the AWS prefix data in your app or automation scripts in the format required by your infrastructure. Easily validate the TLS certificate presented by the IP ranges server. awsipranges has no third-party dependencies and is compatible with CPython v3.7+. >>> import awsipranges >>> aws_ip_ranges = awsipranges . get_ranges ( cafile = \"amazon_root_certificates.pem\" ) >>> '52.94.5.15' in aws_ip_ranges True >>> aws_ip_ranges [ '52.94.5.15' ] AWSIPv4Prefix ( '52.94.5.0/24' , region = 'eu-west-1' , network_border_group = 'eu-west-1' , services = ( 'AMAZON' , 'DYNAMODB' )) >>> aws_ip_ranges . filter ( services = 'CODEBUILD' ) { 'create_date' : datetime . datetime ( 2021 , 8 , 24 , 1 , 31 , 14 , tzinfo = datetime . timezone . utc ), 'ipv4_prefixes' : ( AWSIPv4Prefix ( '3.26.127.24/29' , region = 'ap-southeast-2' , network_border_group = 'ap-southeast-2' , services = ( 'CODEBUILD' ,)), AWSIPv4Prefix ( '3.38.90.8/29' , region = 'ap-northeast-2' , network_border_group = 'ap-northeast-2' , services = ( 'CODEBUILD' ,)), AWSIPv4Prefix ( '3.68.251.232/29' , region = 'eu-central-1' , network_border_group = 'eu-central-1' , services = ( 'CODEBUILD' ,)), AWSIPv4Prefix ( '3.98.171.224/29' , region = 'ca-central-1' , network_border_group = 'ca-central-1' , services = ( 'CODEBUILD' ,)), AWSIPv4Prefix ( '3.101.177.48/29' , region = 'us-west-1' , network_border_group = 'us-west-1' , services = ( 'CODEBUILD' ,)), ... ), 'ipv6_prefixes' : (), 'sync_token' : '1629768674' } >>> for prefix in aws_ip_ranges . filter ( regions = 'eu-west-1' , services = 'DYNAMODB' ): ... print ( prefix . network_address , prefix . netmask ) ... 52.94.5.0 255.255.255.0 52.94.24.0 255.255.254.0 52.94.26.0 255.255.254.0 52.119.240.0 255.255.248.0","title":"Features"},{"location":"index.html#installation","text":"Installing and upgrading awsipranges is easy: Install via PIP \u276f pip install awsipranges Upgrade to the latest version \u276f pip install --upgrade awsipranges","title":"Installation"},{"location":"index.html#documentation","text":"Excellent documentation is now available at: https://aws-samples.github.io/awsipranges/ Check out the Quickstart to dive in and begin using awsipranges.","title":"Documentation"},{"location":"index.html#contribute","text":"See CONTRIBUTING for information on how to contribute to this project.","title":"Contribute"},{"location":"index.html#security","text":"See CONTRIBUTING for information on how to report a security issue with this project.","title":"Security"},{"location":"index.html#license","text":"This project is licensed under the Apache-2.0 License .","title":"License"},{"location":"api.html","text":"Developer Interfaces \u00b6 All public interfaces and classes are exposed under the main awsipranges package. get_ranges() \u00b6 awsipranges. get_ranges ( cafile=None , capath=None ) Get the AWS IP address ranges from the published JSON document. It is your responsibility to verify the TLS certificate presented by the server. By default, the Python urllib module (used by this function) verifies the TLS certificate presented by the server against the system-provided certificate datastore. You can download the Amazon root CA certificates from the Amazon Trust Services repository. The optional cafile and capath parameters may be used to specify a set of trusted CA certificates for the HTTPS request. cafile should point to a single file containing a bundle of CA certificates, whereas capath should point to a directory of certificate files with OpenSSL hash filenames. To verify the TLS certificate against Amazon root certificates, download the CA certificates (in PEM format) from Amazon Trust Services and provide the path to the certificate(s) using the cafile or capath parameters. See the OpenSSL SSL_CTX_load_verify_locations documentation for details on the expected CAfile and CApath file formats. Parameters: cafile ( optional Path) - path to a file of stacked (concatenated) CA certificates in PEM format capath ( optional Path) - path to a directory containing one or more certificates in PEM format using the OpenSSL subject-name-hash filenames Returns: The AWS IP address ranges in a AWSIPPrefixes collection. AWSIPPrefixes \u00b6 class awsipranges. AWSIPPrefixes ( sync_token=None , create_date=None , ipv4_prefixes=None , ipv6_prefixes=None , md5=None ) A collection of AWS IP address prefixes. createDate The publication date and time, in UTC. This is a convenience attribute to maintain API compatibility with the JSON attribute names. create_date The publication date and time, in UTC. filter ( self , regions=None , network_border_groups=None , services=None , versions=None ) Filter the AWS IP address ranges. The service \"AMAZON\" is not a service but rather an identifier used to get all IP address ranges - meaning that every prefix is contained in the subset of prefixes tagged with the \"AMAZON\" service. Some IP address ranges are only tagged with the \"AMAZON\" service. Parameters: regions ( optional str or iterable sequence of strings) - the AWS Regions to include in the subset network_border_groups ( optional str or iterable sequence of strings) - the AWS network border groups to include in the subset services ( optional str or iterable sequence of strings) - the AWS services to include in the subset versions ( optional int) - the IP address version (4, 6) to include in the subset Returns: A new AWSIPPrefixes object that contains the subset of IP prefixes that match your filter criteria. get ( self , key , default=None ) Get the AWS IP address prefix that contains the IPv4 or IPv6 key. Returns the longest-match prefix that contains the provided key or the value of the default= parameter if the key is not found in the collection. Parameters: key (str, IPv4Address, IPv6Address, IPv4Network, IPv6Network, IPv4Interface, IPv6Interface, AWSIPv4Prefix, AWSIPv6Prefix) - the IP address or network to retrieve from the collection default - the value to return if the key is not found in the collection Returns: The AWSIPv4Prefix or AWSIPv6Prefix that contains the provided key. get_prefix_and_supernets ( self , key , default=None ) Get the prefix and supernets that contain the IPv4 or IPv6 key. Returns a tuple that contains the longest-match prefix and supernets that contains the provided key or the value of the default= parameter if the key is not found in the collection. The tuple is sorted by prefix length in ascending order (shorter prefixes come before longer prefixes). Parameters: key (str, IPv4Address, IPv6Address, IPv4Network, IPv6Network, IPv4Interface, IPv6Interface, AWSIPv4Prefix, AWSIPv6Prefix) - the IP address or network to retrieve from the collection default - the value to return if the key is not found in the collection Returns: A tuple of the AWSIPv4Prefix es or AWSIPv6Prefix es that contains the provided key. ipv4_prefixes The IPv4 prefixes in the collection. ipv6_prefixes The IPv6 prefixes in the collection. md5 The MD5 cryptographic hash value of the ip-ranges.json file. You can use this value to verify the integrity of the downloaded file. network_border_groups The set of network border groups in the collection. prefixes The IPv4 prefixes in the collection. This is a convenience attribute to maintain API compatibility with the JSON attribute names. regions The set of regions in the collection. services The set of services in the collection. The service \"AMAZON\" is not a service but rather an identifier used to get all IP address ranges - meaning that every prefix is contained in the subset of prefixes tagged with the \"AMAZON\" service. Some IP address ranges are only tagged with the \"AMAZON\" service. syncToken The publication time, in Unix epoch time format. This is a convenience attribute to maintain API compatibility with the JSON attribute names. sync_token The publication time, in Unix epoch time format. AWSIPPrefix \u00b6 Base class for the AWSIPv4Prefix and AWSIPv6Prefix classes. AWSIPPrefix objects are immutable and hashable and therefore may be added to Python sets and be used as keys in dictionaries. class awsipranges. AWSIPPrefix ( prefix , region , network_border_group , services ) AWS IP Prefix. hostmask The host mask (aka. wildcard mask), as an IP Address object. netmask The net mask, as an IP Address object. network_address The network address for the network. network_border_group The name of the network border group. A network border group is a unique set of Availability Zones or Local Zones from where AWS advertises IP addresses. num_addresses The total number of addresses in the network. prefix The public IP network prefix. prefixlen Length of the network prefix, in bits. region The AWS Region or GLOBAL for edge locations. The CLOUDFRONT and ROUTE53 ranges are GLOBAL. services Services that use IP addresses in this IP prefix. The addresses listed for API_GATEWAY are egress only. The service \"AMAZON\" is not a service but rather an identifier used to get all IP address ranges - meaning that every prefix is contained in the subset of prefixes tagged with the \"AMAZON\" service. Some IP address ranges are only tagged with the \"AMAZON\" service. version The IP version (4, 6). with_hostmask A string representation of the network, with the mask in host mask notation. with_netmask A string representation of the network, with the mask in net mask notation. with_prefixlen A string representation of the IP prefix, in network/prefix notation. AWSIPv4Prefix \u00b6 Supports all the properties and methods of the AWSIPPrefix base class and the Python native IPv4Network class. class awsipranges. AWSIPv4Prefix ( prefix , region , network_border_group , services ) AWS IPv4 Prefix. ip_prefix The public IPv4 network prefix. This is a convenience attribute to maintain API compatibility with the JSON attribute names. AWSIPv6Prefix \u00b6 Supports all the properties and methods of the AWSIPPrefix base class and the Python native IPv6Network class. class awsipranges. AWSIPv6Prefix ( prefix , region , network_border_group , services ) AWS IPv6 Prefix. ipv6_prefix The public IPv6 network prefix. This is a convenience attribute to maintain API compatibility with the JSON attribute names.","title":"API Reference"},{"location":"api.html#developer-interfaces","text":"All public interfaces and classes are exposed under the main awsipranges package.","title":"Developer Interfaces"},{"location":"api.html#get_ranges","text":"awsipranges. get_ranges ( cafile=None , capath=None ) Get the AWS IP address ranges from the published JSON document. It is your responsibility to verify the TLS certificate presented by the server. By default, the Python urllib module (used by this function) verifies the TLS certificate presented by the server against the system-provided certificate datastore. You can download the Amazon root CA certificates from the Amazon Trust Services repository. The optional cafile and capath parameters may be used to specify a set of trusted CA certificates for the HTTPS request. cafile should point to a single file containing a bundle of CA certificates, whereas capath should point to a directory of certificate files with OpenSSL hash filenames. To verify the TLS certificate against Amazon root certificates, download the CA certificates (in PEM format) from Amazon Trust Services and provide the path to the certificate(s) using the cafile or capath parameters. See the OpenSSL SSL_CTX_load_verify_locations documentation for details on the expected CAfile and CApath file formats. Parameters: cafile ( optional Path) - path to a file of stacked (concatenated) CA certificates in PEM format capath ( optional Path) - path to a directory containing one or more certificates in PEM format using the OpenSSL subject-name-hash filenames Returns: The AWS IP address ranges in a AWSIPPrefixes collection.","title":"get_ranges()"},{"location":"api.html#awsipprefixes","text":"class awsipranges. AWSIPPrefixes ( sync_token=None , create_date=None , ipv4_prefixes=None , ipv6_prefixes=None , md5=None ) A collection of AWS IP address prefixes. createDate The publication date and time, in UTC. This is a convenience attribute to maintain API compatibility with the JSON attribute names. create_date The publication date and time, in UTC. filter ( self , regions=None , network_border_groups=None , services=None , versions=None ) Filter the AWS IP address ranges. The service \"AMAZON\" is not a service but rather an identifier used to get all IP address ranges - meaning that every prefix is contained in the subset of prefixes tagged with the \"AMAZON\" service. Some IP address ranges are only tagged with the \"AMAZON\" service. Parameters: regions ( optional str or iterable sequence of strings) - the AWS Regions to include in the subset network_border_groups ( optional str or iterable sequence of strings) - the AWS network border groups to include in the subset services ( optional str or iterable sequence of strings) - the AWS services to include in the subset versions ( optional int) - the IP address version (4, 6) to include in the subset Returns: A new AWSIPPrefixes object that contains the subset of IP prefixes that match your filter criteria. get ( self , key , default=None ) Get the AWS IP address prefix that contains the IPv4 or IPv6 key. Returns the longest-match prefix that contains the provided key or the value of the default= parameter if the key is not found in the collection. Parameters: key (str, IPv4Address, IPv6Address, IPv4Network, IPv6Network, IPv4Interface, IPv6Interface, AWSIPv4Prefix, AWSIPv6Prefix) - the IP address or network to retrieve from the collection default - the value to return if the key is not found in the collection Returns: The AWSIPv4Prefix or AWSIPv6Prefix that contains the provided key. get_prefix_and_supernets ( self , key , default=None ) Get the prefix and supernets that contain the IPv4 or IPv6 key. Returns a tuple that contains the longest-match prefix and supernets that contains the provided key or the value of the default= parameter if the key is not found in the collection. The tuple is sorted by prefix length in ascending order (shorter prefixes come before longer prefixes). Parameters: key (str, IPv4Address, IPv6Address, IPv4Network, IPv6Network, IPv4Interface, IPv6Interface, AWSIPv4Prefix, AWSIPv6Prefix) - the IP address or network to retrieve from the collection default - the value to return if the key is not found in the collection Returns: A tuple of the AWSIPv4Prefix es or AWSIPv6Prefix es that contains the provided key. ipv4_prefixes The IPv4 prefixes in the collection. ipv6_prefixes The IPv6 prefixes in the collection. md5 The MD5 cryptographic hash value of the ip-ranges.json file. You can use this value to verify the integrity of the downloaded file. network_border_groups The set of network border groups in the collection. prefixes The IPv4 prefixes in the collection. This is a convenience attribute to maintain API compatibility with the JSON attribute names. regions The set of regions in the collection. services The set of services in the collection. The service \"AMAZON\" is not a service but rather an identifier used to get all IP address ranges - meaning that every prefix is contained in the subset of prefixes tagged with the \"AMAZON\" service. Some IP address ranges are only tagged with the \"AMAZON\" service. syncToken The publication time, in Unix epoch time format. This is a convenience attribute to maintain API compatibility with the JSON attribute names. sync_token The publication time, in Unix epoch time format.","title":"AWSIPPrefixes"},{"location":"api.html#awsipprefix","text":"Base class for the AWSIPv4Prefix and AWSIPv6Prefix classes. AWSIPPrefix objects are immutable and hashable and therefore may be added to Python sets and be used as keys in dictionaries. class awsipranges. AWSIPPrefix ( prefix , region , network_border_group , services ) AWS IP Prefix. hostmask The host mask (aka. wildcard mask), as an IP Address object. netmask The net mask, as an IP Address object. network_address The network address for the network. network_border_group The name of the network border group. A network border group is a unique set of Availability Zones or Local Zones from where AWS advertises IP addresses. num_addresses The total number of addresses in the network. prefix The public IP network prefix. prefixlen Length of the network prefix, in bits. region The AWS Region or GLOBAL for edge locations. The CLOUDFRONT and ROUTE53 ranges are GLOBAL. services Services that use IP addresses in this IP prefix. The addresses listed for API_GATEWAY are egress only. The service \"AMAZON\" is not a service but rather an identifier used to get all IP address ranges - meaning that every prefix is contained in the subset of prefixes tagged with the \"AMAZON\" service. Some IP address ranges are only tagged with the \"AMAZON\" service. version The IP version (4, 6). with_hostmask A string representation of the network, with the mask in host mask notation. with_netmask A string representation of the network, with the mask in net mask notation. with_prefixlen A string representation of the IP prefix, in network/prefix notation.","title":"AWSIPPrefix"},{"location":"api.html#awsipv4prefix","text":"Supports all the properties and methods of the AWSIPPrefix base class and the Python native IPv4Network class. class awsipranges. AWSIPv4Prefix ( prefix , region , network_border_group , services ) AWS IPv4 Prefix. ip_prefix The public IPv4 network prefix. This is a convenience attribute to maintain API compatibility with the JSON attribute names.","title":"AWSIPv4Prefix"},{"location":"api.html#awsipv6prefix","text":"Supports all the properties and methods of the AWSIPPrefix base class and the Python native IPv6Network class. class awsipranges. AWSIPv6Prefix ( prefix , region , network_border_group , services ) AWS IPv6 Prefix. ipv6_prefix The public IPv6 network prefix. This is a convenience attribute to maintain API compatibility with the JSON attribute names.","title":"AWSIPv6Prefix"},{"location":"quickstart.html","text":"Quickstart \u00b6 awsipranges helps you answer simple questions fast and makes it easy for you to leverage the AWS IP range data in your Python automation scripts and infrastructure configurations. To get started, make sure you have: awsipranges installed awsipranges upgraded to the latest version Then dive-in with this Quickstart to begin working with the AWS IP address ranges as native Python objects! Verify server TLS certificates \u00b6 How do I know that I am working with the authentic and latest AWS IP address ranges? By default, if you do not provide trusted certificates, the Python urllib module (used by the awsipranges.get_ranges() function) verifies the TLS certificate presented by the server against the system-provided certificate datastore. It is your responsibility to verify the TLS certificate presented by the server. awsipranges downloads the latest AWS IP address ranges from the published JSON file and makes it easy for you to verify the authenticity of the TLS certificate presented by the server. Amazon publishes their root Certificate Authority (CA) certificates in the Amazon Trust Services Repository . To verify the TLS certificate presented by the Amazon IP ranges server (ip-ranges.amazonaws.com): Download the Amazon Root CA certificates (in PEM format) from the Amazon Trust Services Repository . Prepare the certificates for use by either: Stacking (concatenating) the files into a single certificate bundle (single file) Storing them in a directory using OpenSSL hash filenames You can do this with the c_rehash script included in many OpenSSL distributions: \u276f c_rehash amazon_root_certificates/ Tip : See tests/unit/test_data_loading.py in the awsipranges repository for sample Python functions that download the Amazon Root CA certificates and prepare the certificates as both a stacked certificate bundle file and as a directory with OpenSSL hash filenames. Pass the path to the prepared certificates to the awsipranges.get_ranges() function using the cafile or capath parameters: cafile= path to the stacked certificate bundle file capath= path to the directory containing the certificates with OpenSSL hashed filenames >>> import awsipranges # Using a stacked certificate bundle >>> aws_ip_ranges = awsipranges . get_ranges ( cafile = \"amazon_root_certificates.pem\" ) # Using directory containing the certificates with OpenSSL hashed filenames >>> aws_ip_ranges = awsipranges . get_ranges ( capath = \"amazon_root_certificates/\" ) Download AWS IP address ranges \u00b6 One line of code (okay, two if you count the import statement) is all it takes to download and parse the AWS IP address ranges into a pythonic data structure: >>> import awsipranges >>> aws_ip_ranges = awsipranges . get_ranges () The awsipranges.get_ranges() function returns an AWSIPPrefixes object, which is a structured collection of AWS IP prefixes. You can access the create_date and sync_token attributes of the AWSIPPrefixes collection to check the version of the downloaded JSON file and verify the integrity of the file with the md5 attribute: >>> aws_ip_ranges . create_date datetime . datetime ( 2021 , 10 , 1 , 16 , 33 , 13 , tzinfo = datetime . timezone . utc ) >>> aws_ip_ranges . sync_token '1633105993' >>> aws_ip_ranges . md5 '59e4cd7f4757a9f380c626d772a5eef2' You can access the IPv4 and IPv6 address prefixes with the ipv4_prefixes and ipv6_prefixes attributes: >>> aws_ip_ranges . ipv4_prefixes ( AWSIPv4Prefix ( '3.0.0.0/15' , region = 'ap-southeast-1' , network_border_group = 'ap-southeast-1' , services = ( 'AMAZON' , 'EC2' )), AWSIPv4Prefix ( '3.0.5.32/29' , region = 'ap-southeast-1' , network_border_group = 'ap-southeast-1' , services = ( 'EC2_INSTANCE_CONNECT' ,)), AWSIPv4Prefix ( '3.0.5.224/27' , region = 'ap-southeast-1' , network_border_group = 'ap-southeast-1' , services = ( 'ROUTE53_RESOLVER' ,)), AWSIPv4Prefix ( '3.2.0.0/24' , region = 'us-east-1' , network_border_group = 'us-east-1-iah-1' , services = ( 'AMAZON' , 'EC2' )), AWSIPv4Prefix ( '3.2.2.0/24' , region = 'us-east-1' , network_border_group = 'us-east-1-mia-1' , services = ( 'AMAZON' , 'EC2' )), ... ) >>> aws_ip_ranges . ipv6_prefixes ( AWSIPv6Prefix ( '2400:6500:0:9::1/128' , region = 'ap-southeast-3' , network_border_group = 'ap-southeast-3' , services = ( 'AMAZON' ,)), AWSIPv6Prefix ( '2400:6500:0:9::2/128' , region = 'ap-southeast-3' , network_border_group = 'ap-southeast-3' , services = ( 'AMAZON' ,)), AWSIPv6Prefix ( '2400:6500:0:9::3/128' , region = 'ap-southeast-3' , network_border_group = 'ap-southeast-3' , services = ( 'AMAZON' ,)), AWSIPv6Prefix ( '2400:6500:0:9::4/128' , region = 'ap-southeast-3' , network_border_group = 'ap-southeast-3' , services = ( 'AMAZON' ,)), AWSIPv6Prefix ( '2400:6500:0:7000::/56' , region = 'ap-southeast-1' , network_border_group = 'ap-southeast-1' , services = ( 'AMAZON' ,)), ... ) ...and if that's all this library did, it would be pretty boring. Check an IP address or network \u00b6 How can I check to see if an IP address or network is contained in the AWS IP address ranges? AWSIPPrefixes works like a standard python collection. You can check to see if an IP address, interface, or network is contained in the collection by using the Python in operator: >>> '52.94.5.15' in aws_ip_ranges True >>> '43.195.173.0/24' in aws_ip_ranges True >>> IPv4Network ( '13.50.0.0/16' ) in aws_ip_ranges True >>> '1.1.1.1' in aws_ip_ranges False Find an AWS IP prefix \u00b6 How can I find the AWS IP prefix that contains an IP address or network? You can get the longest-match prefix that contains an IP address or network by indexing into the AWSIPPrefixes collection or using the get() method just like you do with a Python dictionary: >>> aws_ip_ranges [ '52.94.5.15' ] AWSIPv4Prefix ( '52.94.5.0/24' , region = 'eu-west-1' , network_border_group = 'eu-west-1' , services = ( 'AMAZON' , 'DYNAMODB' )) >>> aws_ip_ranges . get ( '52.94.5.15' ) AWSIPv4Prefix ( '52.94.5.0/24' , region = 'eu-west-1' , network_border_group = 'eu-west-1' , services = ( 'AMAZON' , 'DYNAMODB' )) >>> aws_ip_ranges . get ( '1.1.1.1' , default = 'Nope' ) 'Nope' The AWS IP address ranges contain supernet and subnet prefixes, so an IP address or network may be contained in more than one AWS IP prefix. Use the get_prefix_and_supernets() method to retrieve all IP prefixes that contain an IP address or network: >>> aws_ip_ranges . get_prefix_and_supernets ( '3.218.180.73' ) ( AWSIPv4Prefix ( '3.208.0.0/12' , region = 'us-east-1' , network_border_group = 'us-east-1' , services = ( 'AMAZON' , 'EC2' )), AWSIPv4Prefix ( '3.218.180.0/22' , region = 'us-east-1' , network_border_group = 'us-east-1' , services = ( 'DYNAMODB' ,)), AWSIPv4Prefix ( '3.218.180.0/25' , region = 'us-east-1' , network_border_group = 'us-east-1' , services = ( 'DYNAMODB' ,))) Filter AWS IP prefixes \u00b6 How can I filter the AWS IP prefixes by Region, network border group, or service? The filter() method allows you to select a subset of AWS IP prefixes from the collection. You can filter on regions , network_border_groups , IP versions (4, 6), and services . The filter() method returns a new AWSIPPrefixes object that contains the subset of IP prefixes that match your filter criteria. You may pass a single value ( regions='eu-central-2' ) or a sequence of values ( regions=['eu-central-1', 'eu-central-2'] ) to the filter parameters. The filter() method returns the prefixes that match all the provided parameters; selecting prefixes where the prefix's attributes intersect the provided set of values. For example, filter(regions=['eu-central-1', 'eu-central-2'], services='EC2', versions=4) will select all IP version 4 prefixes that have EC2 in the prefix's list of services and are in the eu-central-1 or eu-central-2 Regions. >>> aws_ip_ranges . filter ( regions = 'eu-central-2' , services = 'EC2' , versions = 4 ) { 'create_date' : datetime . datetime ( 2021 , 9 , 16 , 17 , 43 , 14 , tzinfo = datetime . timezone . utc ), 'ipv4_prefixes' : ( AWSIPv4Prefix ( '3.5.52.0/22' , region = 'eu-central-2' , network_border_group = 'eu-central-2' , services = ( 'AMAZON' , 'EC2' , 'S3' )), AWSIPv4Prefix ( '16.62.0.0/15' , region = 'eu-central-2' , network_border_group = 'eu-central-2' , services = ( 'AMAZON' , 'EC2' )), AWSIPv4Prefix ( '52.94.250.0/28' , region = 'eu-central-2' , network_border_group = 'eu-central-2' , services = ( 'AMAZON' , 'EC2' )), AWSIPv4Prefix ( '99.151.80.0/21' , region = 'eu-central-2' , network_border_group = 'eu-central-2' , services = ( 'AMAZON' , 'EC2' ))), 'ipv6_prefixes' : (), 'sync_token' : '1631814194' } Tip : You can view the set of all regions, network border groups, and services contained in an AWSIPPrefixes collection with the regions , network_border_groups , and services attributes. >>> aws_ip_ranges . services frozenset ({ 'AMAZON' , 'AMAZON_APPFLOW' , 'AMAZON_CONNECT' , 'API_GATEWAY' , 'CHIME_MEETINGS' , 'CHIME_VOICECONNECTOR' , 'CLOUD9' , 'CLOUDFRONT' , 'CODEBUILD' , 'DYNAMODB' , 'EBS' , 'EC2' , 'EC2_INSTANCE_CONNECT' , 'GLOBALACCELERATOR' , 'KINESIS_VIDEO_STREAMS' , 'ROUTE53' , 'ROUTE53_HEALTHCHECKS' , 'ROUTE53_HEALTHCHECKS_PUBLISHING' , 'ROUTE53_RESOLVER' , 'S3' , 'WORKSPACES_GATEWAYS' }) Work with AWS IP prefix objects \u00b6 My router/firewall wants IP networks in a net-mask or host-mask format. Do the AWS IP prefix objects provide a way for me to get the prefix in the format I need? AWSIPv4Prefix and AWSIPv6Prefix objects are proxies around IPv4Network and IPv6Network objects from the Python standard library (see the ipaddress module). They support all the attributes and methods available on the IPv4Network and IPv6Network objects. They also inherit additional attributes (like region , network_border_group , and services ) and additional functionality from the AWSIPPrefix base class. Combining the functionality provided by the standard library objects with the rich collection capabilities provided by the awsipranges library allows you to complete complex tasks easily: Like adding routes to the DYNAMODB prefixes in the eu-west-1 Region to a router: >>> for prefix in aws_ip_ranges . filter ( regions = 'eu-west-1' , services = 'DYNAMODB' ): ... print ( f \"ip route { prefix . network_address } { prefix . netmask } 1.1.1.1\" ) ... ip route 52.94.5.0 255.255.255.0 1.1.1.1 ip route 52.94.24.0 255.255.254.0 1.1.1.1 ip route 52.94.26.0 255.255.254.0 1.1.1.1 ip route 52.119.240.0 255.255.248.0 1.1.1.1 Or, configuring an access control list to allow traffic to the S3 prefixes in eu-north-1 : >>> for prefix in aws_ip_ranges . filter ( regions = 'eu-north-1' , services = 'S3' , versions = 4 ): ... print ( f \"permit tcp any { prefix . network_address } { prefix . hostmask } eq 443\" ) ... permit tcp any 3.5.216.0 0.0.3.255 eq 443 permit tcp any 13.51.71.176 0.0.0.15 eq 443 permit tcp any 13.51.71.192 0.0.0.15 eq 443 permit tcp any 52.95.169.0 0.0.0.255 eq 443 permit tcp any 52.95.170.0 0.0.1.255 eq 443 These are only a couple possibilities. Python and awsipranges allow you to use the AWS IP ranges in your automation scripts to accomplish powerful tasks simply. What about IPv6? \u00b6 All the functionality and examples shown in this Quickstart also work with IPv6 prefixes! \ud83d\ude0e","title":"Quickstart"},{"location":"quickstart.html#quickstart","text":"awsipranges helps you answer simple questions fast and makes it easy for you to leverage the AWS IP range data in your Python automation scripts and infrastructure configurations. To get started, make sure you have: awsipranges installed awsipranges upgraded to the latest version Then dive-in with this Quickstart to begin working with the AWS IP address ranges as native Python objects!","title":"Quickstart"},{"location":"quickstart.html#verify-server-tls-certificates","text":"How do I know that I am working with the authentic and latest AWS IP address ranges? By default, if you do not provide trusted certificates, the Python urllib module (used by the awsipranges.get_ranges() function) verifies the TLS certificate presented by the server against the system-provided certificate datastore. It is your responsibility to verify the TLS certificate presented by the server. awsipranges downloads the latest AWS IP address ranges from the published JSON file and makes it easy for you to verify the authenticity of the TLS certificate presented by the server. Amazon publishes their root Certificate Authority (CA) certificates in the Amazon Trust Services Repository . To verify the TLS certificate presented by the Amazon IP ranges server (ip-ranges.amazonaws.com): Download the Amazon Root CA certificates (in PEM format) from the Amazon Trust Services Repository . Prepare the certificates for use by either: Stacking (concatenating) the files into a single certificate bundle (single file) Storing them in a directory using OpenSSL hash filenames You can do this with the c_rehash script included in many OpenSSL distributions: \u276f c_rehash amazon_root_certificates/ Tip : See tests/unit/test_data_loading.py in the awsipranges repository for sample Python functions that download the Amazon Root CA certificates and prepare the certificates as both a stacked certificate bundle file and as a directory with OpenSSL hash filenames. Pass the path to the prepared certificates to the awsipranges.get_ranges() function using the cafile or capath parameters: cafile= path to the stacked certificate bundle file capath= path to the directory containing the certificates with OpenSSL hashed filenames >>> import awsipranges # Using a stacked certificate bundle >>> aws_ip_ranges = awsipranges . get_ranges ( cafile = \"amazon_root_certificates.pem\" ) # Using directory containing the certificates with OpenSSL hashed filenames >>> aws_ip_ranges = awsipranges . get_ranges ( capath = \"amazon_root_certificates/\" )","title":"Verify server TLS certificates"},{"location":"quickstart.html#download-aws-ip-address-ranges","text":"One line of code (okay, two if you count the import statement) is all it takes to download and parse the AWS IP address ranges into a pythonic data structure: >>> import awsipranges >>> aws_ip_ranges = awsipranges . get_ranges () The awsipranges.get_ranges() function returns an AWSIPPrefixes object, which is a structured collection of AWS IP prefixes. You can access the create_date and sync_token attributes of the AWSIPPrefixes collection to check the version of the downloaded JSON file and verify the integrity of the file with the md5 attribute: >>> aws_ip_ranges . create_date datetime . datetime ( 2021 , 10 , 1 , 16 , 33 , 13 , tzinfo = datetime . timezone . utc ) >>> aws_ip_ranges . sync_token '1633105993' >>> aws_ip_ranges . md5 '59e4cd7f4757a9f380c626d772a5eef2' You can access the IPv4 and IPv6 address prefixes with the ipv4_prefixes and ipv6_prefixes attributes: >>> aws_ip_ranges . ipv4_prefixes ( AWSIPv4Prefix ( '3.0.0.0/15' , region = 'ap-southeast-1' , network_border_group = 'ap-southeast-1' , services = ( 'AMAZON' , 'EC2' )), AWSIPv4Prefix ( '3.0.5.32/29' , region = 'ap-southeast-1' , network_border_group = 'ap-southeast-1' , services = ( 'EC2_INSTANCE_CONNECT' ,)), AWSIPv4Prefix ( '3.0.5.224/27' , region = 'ap-southeast-1' , network_border_group = 'ap-southeast-1' , services = ( 'ROUTE53_RESOLVER' ,)), AWSIPv4Prefix ( '3.2.0.0/24' , region = 'us-east-1' , network_border_group = 'us-east-1-iah-1' , services = ( 'AMAZON' , 'EC2' )), AWSIPv4Prefix ( '3.2.2.0/24' , region = 'us-east-1' , network_border_group = 'us-east-1-mia-1' , services = ( 'AMAZON' , 'EC2' )), ... ) >>> aws_ip_ranges . ipv6_prefixes ( AWSIPv6Prefix ( '2400:6500:0:9::1/128' , region = 'ap-southeast-3' , network_border_group = 'ap-southeast-3' , services = ( 'AMAZON' ,)), AWSIPv6Prefix ( '2400:6500:0:9::2/128' , region = 'ap-southeast-3' , network_border_group = 'ap-southeast-3' , services = ( 'AMAZON' ,)), AWSIPv6Prefix ( '2400:6500:0:9::3/128' , region = 'ap-southeast-3' , network_border_group = 'ap-southeast-3' , services = ( 'AMAZON' ,)), AWSIPv6Prefix ( '2400:6500:0:9::4/128' , region = 'ap-southeast-3' , network_border_group = 'ap-southeast-3' , services = ( 'AMAZON' ,)), AWSIPv6Prefix ( '2400:6500:0:7000::/56' , region = 'ap-southeast-1' , network_border_group = 'ap-southeast-1' , services = ( 'AMAZON' ,)), ... ) ...and if that's all this library did, it would be pretty boring.","title":"Download AWS IP address ranges"},{"location":"quickstart.html#check-an-ip-address-or-network","text":"How can I check to see if an IP address or network is contained in the AWS IP address ranges? AWSIPPrefixes works like a standard python collection. You can check to see if an IP address, interface, or network is contained in the collection by using the Python in operator: >>> '52.94.5.15' in aws_ip_ranges True >>> '43.195.173.0/24' in aws_ip_ranges True >>> IPv4Network ( '13.50.0.0/16' ) in aws_ip_ranges True >>> '1.1.1.1' in aws_ip_ranges False","title":"Check an IP address or network"},{"location":"quickstart.html#find-an-aws-ip-prefix","text":"How can I find the AWS IP prefix that contains an IP address or network? You can get the longest-match prefix that contains an IP address or network by indexing into the AWSIPPrefixes collection or using the get() method just like you do with a Python dictionary: >>> aws_ip_ranges [ '52.94.5.15' ] AWSIPv4Prefix ( '52.94.5.0/24' , region = 'eu-west-1' , network_border_group = 'eu-west-1' , services = ( 'AMAZON' , 'DYNAMODB' )) >>> aws_ip_ranges . get ( '52.94.5.15' ) AWSIPv4Prefix ( '52.94.5.0/24' , region = 'eu-west-1' , network_border_group = 'eu-west-1' , services = ( 'AMAZON' , 'DYNAMODB' )) >>> aws_ip_ranges . get ( '1.1.1.1' , default = 'Nope' ) 'Nope' The AWS IP address ranges contain supernet and subnet prefixes, so an IP address or network may be contained in more than one AWS IP prefix. Use the get_prefix_and_supernets() method to retrieve all IP prefixes that contain an IP address or network: >>> aws_ip_ranges . get_prefix_and_supernets ( '3.218.180.73' ) ( AWSIPv4Prefix ( '3.208.0.0/12' , region = 'us-east-1' , network_border_group = 'us-east-1' , services = ( 'AMAZON' , 'EC2' )), AWSIPv4Prefix ( '3.218.180.0/22' , region = 'us-east-1' , network_border_group = 'us-east-1' , services = ( 'DYNAMODB' ,)), AWSIPv4Prefix ( '3.218.180.0/25' , region = 'us-east-1' , network_border_group = 'us-east-1' , services = ( 'DYNAMODB' ,)))","title":"Find an AWS IP prefix"},{"location":"quickstart.html#filter-aws-ip-prefixes","text":"How can I filter the AWS IP prefixes by Region, network border group, or service? The filter() method allows you to select a subset of AWS IP prefixes from the collection. You can filter on regions , network_border_groups , IP versions (4, 6), and services . The filter() method returns a new AWSIPPrefixes object that contains the subset of IP prefixes that match your filter criteria. You may pass a single value ( regions='eu-central-2' ) or a sequence of values ( regions=['eu-central-1', 'eu-central-2'] ) to the filter parameters. The filter() method returns the prefixes that match all the provided parameters; selecting prefixes where the prefix's attributes intersect the provided set of values. For example, filter(regions=['eu-central-1', 'eu-central-2'], services='EC2', versions=4) will select all IP version 4 prefixes that have EC2 in the prefix's list of services and are in the eu-central-1 or eu-central-2 Regions. >>> aws_ip_ranges . filter ( regions = 'eu-central-2' , services = 'EC2' , versions = 4 ) { 'create_date' : datetime . datetime ( 2021 , 9 , 16 , 17 , 43 , 14 , tzinfo = datetime . timezone . utc ), 'ipv4_prefixes' : ( AWSIPv4Prefix ( '3.5.52.0/22' , region = 'eu-central-2' , network_border_group = 'eu-central-2' , services = ( 'AMAZON' , 'EC2' , 'S3' )), AWSIPv4Prefix ( '16.62.0.0/15' , region = 'eu-central-2' , network_border_group = 'eu-central-2' , services = ( 'AMAZON' , 'EC2' )), AWSIPv4Prefix ( '52.94.250.0/28' , region = 'eu-central-2' , network_border_group = 'eu-central-2' , services = ( 'AMAZON' , 'EC2' )), AWSIPv4Prefix ( '99.151.80.0/21' , region = 'eu-central-2' , network_border_group = 'eu-central-2' , services = ( 'AMAZON' , 'EC2' ))), 'ipv6_prefixes' : (), 'sync_token' : '1631814194' } Tip : You can view the set of all regions, network border groups, and services contained in an AWSIPPrefixes collection with the regions , network_border_groups , and services attributes. >>> aws_ip_ranges . services frozenset ({ 'AMAZON' , 'AMAZON_APPFLOW' , 'AMAZON_CONNECT' , 'API_GATEWAY' , 'CHIME_MEETINGS' , 'CHIME_VOICECONNECTOR' , 'CLOUD9' , 'CLOUDFRONT' , 'CODEBUILD' , 'DYNAMODB' , 'EBS' , 'EC2' , 'EC2_INSTANCE_CONNECT' , 'GLOBALACCELERATOR' , 'KINESIS_VIDEO_STREAMS' , 'ROUTE53' , 'ROUTE53_HEALTHCHECKS' , 'ROUTE53_HEALTHCHECKS_PUBLISHING' , 'ROUTE53_RESOLVER' , 'S3' , 'WORKSPACES_GATEWAYS' })","title":"Filter AWS IP prefixes"},{"location":"quickstart.html#work-with-aws-ip-prefix-objects","text":"My router/firewall wants IP networks in a net-mask or host-mask format. Do the AWS IP prefix objects provide a way for me to get the prefix in the format I need? AWSIPv4Prefix and AWSIPv6Prefix objects are proxies around IPv4Network and IPv6Network objects from the Python standard library (see the ipaddress module). They support all the attributes and methods available on the IPv4Network and IPv6Network objects. They also inherit additional attributes (like region , network_border_group , and services ) and additional functionality from the AWSIPPrefix base class. Combining the functionality provided by the standard library objects with the rich collection capabilities provided by the awsipranges library allows you to complete complex tasks easily: Like adding routes to the DYNAMODB prefixes in the eu-west-1 Region to a router: >>> for prefix in aws_ip_ranges . filter ( regions = 'eu-west-1' , services = 'DYNAMODB' ): ... print ( f \"ip route { prefix . network_address } { prefix . netmask } 1.1.1.1\" ) ... ip route 52.94.5.0 255.255.255.0 1.1.1.1 ip route 52.94.24.0 255.255.254.0 1.1.1.1 ip route 52.94.26.0 255.255.254.0 1.1.1.1 ip route 52.119.240.0 255.255.248.0 1.1.1.1 Or, configuring an access control list to allow traffic to the S3 prefixes in eu-north-1 : >>> for prefix in aws_ip_ranges . filter ( regions = 'eu-north-1' , services = 'S3' , versions = 4 ): ... print ( f \"permit tcp any { prefix . network_address } { prefix . hostmask } eq 443\" ) ... permit tcp any 3.5.216.0 0.0.3.255 eq 443 permit tcp any 13.51.71.176 0.0.0.15 eq 443 permit tcp any 13.51.71.192 0.0.0.15 eq 443 permit tcp any 52.95.169.0 0.0.0.255 eq 443 permit tcp any 52.95.170.0 0.0.1.255 eq 443 These are only a couple possibilities. Python and awsipranges allow you to use the AWS IP ranges in your automation scripts to accomplish powerful tasks simply.","title":"Work with AWS IP prefix objects"},{"location":"quickstart.html#what-about-ipv6","text":"All the functionality and examples shown in this Quickstart also work with IPv6 prefixes! \ud83d\ude0e","title":"What about IPv6?"}]}